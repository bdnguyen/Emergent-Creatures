@path "classes"
@path "lib/classes"


@use Mobile.
@use Control.
@use constants.

Mobile: Creature {
	+ variables:
			etatAccelere (int).
			accelereLoc (vector).
			etatErrant (int).
			errantLoc (vector).
			energie (float).		
			mort(int).
	
	+ to init:	
			mort=0.
			etatAccelere=0.
		   	accelereLoc=(0,0,0).
			etatErrant=0.
			errantLoc=(0,0,0).
			energie=0.
			
	+ to set-mort:
			mort=1.
		
	+ to set-energie to e (float):
			energie = e.
		
	+ to get-energie:
			return energie.		
	
	+ to se-balader:
			if random[CONST_BALADER] == 0: {
				self egarer vers random[2*CREATURE_RANGE] - CREATURE_RANGE.		
			}	
			 				

	+ to reduire-energie par n (double):
		energie -= n.
		if (energie <= 0.0): free self.	
	
	
	+ to accelere vers location (vector):
		etatAccelere = 1.
		accelereLoc = location.  
	
	+ to egarer vers location (vector):	
		etatErrant = 1.
		errantLoc = location.	
	
	+ to actionAccelere:
			if etatAccelere: {
				self offset by .06 *(accelereLoc - (self get-location)).
				if (|accelereLoc - (self get-location)| < .01): {
					self move to accelereLoc.
					etatAccelere = 0.   
				}		
			}

	+ to actionEgarer:
			if etatErrant: {
				self offset by .005 *(errantLoc - (self get-location)).
				if (|errantLoc - (self get-location)| < .01): {
					self move to errantLoc.
					etatErrant = 0.   
				}
			}			
			
			
	+ to cherche-food-plus-proche in neighbors (list):
			item (object).
			ppFood (object).
			distance (float).			
			ppDistance(int).
			
			ppDistance = 10000.

			foreach item in neighbors: {
					distance = |(self get-location) - (item get-location)|.

					if (distance < ppDistance) && (item is a "Food"): {
							ppFood = item.
							ppDistance = distance.
					}
			}
			return ppFood.			

	+ to cherche-proie-plus-proche in neighbors (list):
			item (object).
			ppProie (object).
			distance (float).			
			ppDistance(int).
			
			ppDistance = 10000.

			foreach item in neighbors: {
					distance = |(self get-location) - (item get-location)|.

					if (distance < ppDistance) && (item is a "Proie"): {
							ppProie = item.
							ppDistance = distance.
					}
			}
			return ppProie.				

	+ to check-visi of item (object):
	
		if (item == self): return 0.
		if !(item is a "Creature"): return 0.
		if (self get-angle to item) > 2.0: return 0.

		return 1. 

}
	
