@path "classes"
@path "lib/classes"


@use Mobile.
@use Control.
@use constants.

Mobile: Creature {
	+ variables:
		drifting (int).
		driftLocation (vector).
		wandering (int).
		wanderLocation (vector).
		energie (float).
		mort(int).
	
	+ to init:	
			mort=0.
			drifting=0.
		    driftLocation=(0,0,0).
			wandering=0.
			wanderLocation=(0,0,0).
			energie=0.
		
	+ to set-mort:
			mort=1.
		
	+ to set-energie to e (float):
			energie = e.
		
	+ to get-energie:
			return energie.		
	
	+ to se-balader:
		if random[CONST_BALADER] == 0: { 
			self wander to random[3*CREATURE_RANGE] - CREATURE_RANGE. 
		}		
	
	+ to checkMortDeFaim with e(float):
		if ((self get-energie)==e):
			self set-mort.
			return mort.
	
	+ to actionMortDeFaim with interval (int) and items (list):
		item(object).
		en(float).
		k (int).
		k = interval.
		foreach item in items:
			en = (item get-energie).
			controller schedule method-call "checkFaim with $en" at-time ((controller get-time) + k).
			k+=interval.
	
	+ to drift to location (vector):
		drifting = 1.
		driftLocation = location.  
	
	+ to wander to location (vector):	
		wandering = 1.
		wanderLocation = location.	
	
	+ to actionDrift:
			if drifting: {
				self offset by .06 *(driftLocation - (self get-location)).
				if (|driftLocation - (self get-location)| < .01): {
					self move to driftLocation.
					drifting = 0.   
				}		
			}

	+ to actionWander:
			if wandering: {
				self offset by .005 *(wanderLocation - (self get-location)).
				if (|wanderLocation - (self get-location)| < .01): {
					self move to wanderLocation.
					wandering = 0.   
				}
			}			
			
			
	+ to find-closest-cible in neighbors (list):
			item (object).
			closestCible (object).
			distance (float).			
			closestDistance(int).
			
			closestDistance = 100.

			foreach item in neighbors: {
					distance = |(self get-location) - (item get-location)|.

					if distance < closestDistance: {
							closestCible = item.
							closestDistance = distance.
					}
			}
			return closestCible.				

	+ to check-visi of item (object):
		# An item is visible if it is within a certain angle (2.0 radians) 
		# of the direction we're facing (assumed to be a vector in the 
		# direction we're moving).

		if (item == self): return 0.
		if !(item is a "Creature"): return 0.
		if (self get-angle to item) > 2.0: return 0.

		return 1. 

	+ to get-angle to obj (object):
		tempVector (vector).

		if | ( self get-velocity ) | == 0: return 0.
		
		tempVector = (obj get-location) - (self get-location).
		return angle((self get-velocity), tempVector).			
}
	
